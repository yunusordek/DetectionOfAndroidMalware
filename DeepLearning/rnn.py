
# Code to read csv file into Colaboratory:
!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

link="Your google drive csv location link"
fluff, id = link.split('=')

import pandas as pd 
downloaded = drive.CreateFile({'id':id}) 
downloaded.GetContentFile('new_all.csv')  
data = pd.read_csv('new_all.csv')

import scipy as sp
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from keras.preprocessing import sequence
import numpy as np

x=data.iloc[:,0:82]
y=data.iloc[:,82:83]
x=x.values
y=y.values

x_eğitim, x_test,y_eğitim, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)

from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from keras import layers
from keras.layers import Dropout
from keras import models
from keras.utils import np_utils
import keras
from keras.models import Sequential
from keras.layers import Conv1D, GlobalAveragePooling1D, MaxPooling1D
from keras.layers import Dense, Activation, Dropout, Flatten
from keras.layers.normalization import BatchNormalization
from keras.optimizers import SGD
import matplotlib.pyplot as plt

x_eğitim = np.reshape(x_eğitim, (x_eğitim.shape[0], 1, x_eğitim.shape[1]))
x_test = np.reshape(x_test, (x_test.shape[0], 1, x_test.shape[1]))

from keras.layers import SimpleRNN
model = Sequential()
model.add(SimpleRNN(units=32, input_shape=(1,82), activation="relu"))
model.add(Dense(32, activation="relu")) 
model.add(Dense(1))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.summary()

history= model.fit(x_eğitim, y_eğitim,
          validation_data=(x_test, y_test),
          batch_size=16,
          epochs=2)

plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('Model doğruluğu')
plt.ylabel('Doğruluk')
plt.xlabel('Epoch')
plt.legend(['Eğitim', 'Test'], loc='upper left')
plt.show()

# Plot training & validation loss values
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Kaybı')
plt.ylabel('Kayıp')
plt.xlabel('Epoch')
plt.legend(['Eğitim', 'Test'], loc='upper left')
plt.show()

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()                       
drive = GoogleDrive(gauth)

model.save('model.h5')
model_file = drive.CreateFile({'title' : 'model.h5'})                       
model_file.SetContentFile('model.h5')                       
model_file.Upload()

# download to google drive                       
drive.CreateFile({'id': model_file.get('id')})

file_obj = drive.CreateFile({'id':'1c1y6Pb0SSMp_eMbZRTvsiXLKEwDB_WgM'})
file_obj.GetContentFile('model.h5')